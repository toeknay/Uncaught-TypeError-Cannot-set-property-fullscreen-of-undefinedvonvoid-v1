@supports (-webkit-overflow-scrolling: touch) {
    body { cursor: pointer; }
}

input{
    margin:.25rem .25rem;
}

.csf-alert {
    position: absolute;
    height: auto !important;
    overflow: hidden;
    background:#f1f1f1;
    box-shadow:0 0 8px 0 rgba(49,49,50,.05);
    display: none;
    opacity: 0;
    border-radius: 3px 3px;
    padding:7px;
    z-index: 999999;
    transition: all .25s ease;

    input.alert-clone{
        margin: 0 !important;
    }

    // Build out the custom checkbox
    .inner {

        float: none;
        padding:10px 0 0 1px;
        font-size: 14px;
        color:#333 !important;
        text-align: left !important;

        .invalid-alert-feedback {
            display:none;
        }

        /*Hide actual checkbox*/
        .cb-wrap {
            line-height: 23px; /*vertically centers the text with the checkbox elem*/
            margin-bottom: .5rem;

            input[type=checkbox]{
                opacity: 0;
                // reset checkbox to overcome css bleed on people's pages
                width: 1px !important;
                height: 1px !important;
                display: none;
                // margin-top: 0;
                // margin-right: 0;
                // padding: 0;
                // border: none;
                // border-radius: 0;
                // background-color: transparent;
                // background-clip: initial;
            }
            label {
                position: relative;
                display: inline-block;
                margin: 0;
                padding: 0;

                /*16px width of fake checkbox + 6px distance between fake checkbox and text*/
                padding-left: 26px !important;

                &::before,
                &::after {
                    position: absolute;
                    content: "";

                    /*Needed for the line-height to take effect*/
                    display: inline-block;
                }

                /*Outer box of the fake checkbox*/
                &::before {
                    height: 20px;
                    width: 20px;

                    border: 1px solid #ccc;
                    left: 0px;

                    background-color: #fff;
                    border-radius: 2px;

                    /*(24px line-height - 16px height of fake checkbox) / 2 - 1px for the border
                     *to vertically center it.
                     */
                    top: 0px;
                    cursor: pointer;
                }

                /*Checkmark of the fake checkbox*/
                &::after {
                    height: 6px;
                    width: 12px;
                    border-left: 3px solid;
                    border-bottom: 3px solid;
                    border-color: #fff;

                    transform: rotate(-45deg);

                    left: 4px;
                    top: 6px;
                    cursor: pointer;
                }
            }
            /*Hide the checkmark by default*/
            input[type="checkbox"] + label::after {
                content: none;
            }

            /*Unhide on the checked state*/
            input[type="checkbox"]:checked + label::after {
                content: "";
            }

            /*Adding checked styles on the outer-box of the fake checkbox*/
            input[type="checkbox"]:checked + label::before {
                background: rgb(59, 153, 252);
                border-color: rgb(59, 153, 252);
            }
        }
    }

    &.show-alert {
        opacity: 1;

        .inner{
            display: block;
        }
        // &.valid-alert {
        //
        // }
        &.invalid-alert{
            background-color:#fddfe2;
            box-shadow:0 0 18px 0 rgba(49,49,50,.08);

            .invalid-alert label::before {
                border-color: #f23749;
            }

            // Nest in ANOTHER invalid-alert class (on checkbox wrapper)
            .invalid-alert .invalid-alert-feedback {
                color: #f23749 !important;
                font-weight: bold;
                display: block;
                // padding-left: 15px;
            }
        }
    }
}

// Button overlay
// (for event catching)
.csf-alert-btn {
    cursor: pointer;
    position: absolute;
    opacity: 0 !important;

    &:hover + .csf-alert-btn-o {/*targets parent button*/}
}

// input.valid-alert,
// .valid-alert input,
// input.valid-alert:-webkit-autofill{
//     // border: 1px solid #28a745; // Maybe lets not screw with their border
//     background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path fill="#28a745" d="M435.848 83.466L172.804 346.51l-96.652-96.652c-4.686-4.686-12.284-4.686-16.971 0l-28.284 28.284c-4.686 4.686-4.686 12.284 0 16.971l133.421 133.421c4.686 4.686 12.284 4.686 16.971 0l299.813-299.813c4.686-4.686 4.686-12.284 0-16.971l-28.284-28.284c-4.686-4.686-12.284-4.686-16.97 0z"/></svg>') !important;
//     background-repeat: no-repeat !important;
//     background-size:15px 15px !important;
//     background-position: 96% 50% !important;
// }